@model IEnumerable<BusTickitAppClient.Models.BusRoute>

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Bus Routes</title>
    <!-- Bootstrap CSS -->
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
</head>

<body>
    <div class="container">
        <h1 class="mt-5">Bus Routes</h1>
        <a href="/Bookings">
            <div id="userBookingsCount" class="mt-3"></div>
        </a>
        <div class="row mt-4">
            <div class="col-md-3">
                <label for="dateFilter">Date:</label>
                <input type="date" id="dateFilter" class="form-control">
            </div>
            <div class="col-md-3">
                <label for="originFilter">Origin:</label>
                <input type="text" id="originFilter" class="form-control">
            </div>
            <div class="col-md-3">
                <label for="destinationFilter">Destination:</label>
                <input type="text" id="destinationFilter" class="form-control">
            </div>
            <div class="col-md-3">
                <button onclick="applyFilters()" class="btn btn-primary mt-4">Apply Filters</button>
                <button onclick="clearFilters()" class="btn btn-secondary mt-4">Clear Filters</button>
            </div>
        </div>
        <table id="busRoutesTable" class="table table-striped mt-4">
            <thead class="thead-dark">
                <tr>
                    <th>Route ID</th>
                    <th>Origin</th>
                    <th>Destination</th>
                    <th>Departure Time</th>
                    <th>Arrival Time</th>

                </tr>
            </thead>
            <tbody>
                @foreach (var route in Model)
                {
                    <tr>
                        <td>@route.RouteId</td>
                        <td>@route.Origin</td>
                        <td>@route.Destination</td>
                        <td>@route.DepartureTime.ToString("yyyy-MM-dd HH:mm:ss")</td>
                        <td>@route.ArrivalTime.ToString("yyyy-MM-dd HH:mm:ss")</td>
                        <td>
                            <button class="btn btn-primary" onclick="openBookingModal('@route.RouteId')">Create
                                Booking</button>
                        </td>

                    </tr>
                }
            </tbody>
        </table>
    </div>
    <!-- Modal for booking creation -->
    <div class="modal fade" id="bookingModal" tabindex="-1" role="dialog" aria-labelledby="bookingModalLabel"
        aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="bookingModalLabel">Create Booking</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <form id="bookingForm">
                        <div class="form-group">
                            <label for="numOfSeats">Number of Seats:</label>
                            <input type="number" class="form-control" id="numOfSeats" name="numOfSeats" required max="5"
                                min="1">
                        </div>
                        <!-- Hidden input for routeId -->
                        <input type="hidden" id="routeId" name="routeId">
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" onclick="createBooking()">Create</button>
                </div>
            </div>
        </div>
    </div>
    <!-- Bootstrap JS (optional, if you need it) -->
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    <script>
        function applyFilters() {
            const dateFilter = document.getElementById('dateFilter').value;
            const originFilter = document.getElementById('originFilter').value.toLowerCase();
            const destinationFilter = document.getElementById('destinationFilter').value.toLowerCase();

            // Filter the bus routes based on selected values
            const filteredRoutes = @Html.Raw(Json.Serialize(Model))
            .filter(route => {
                return (!dateFilter || new Date(route.departureTime).toDateString() === new Date(dateFilter).toDateString()) &&
                    (!originFilter || route.origin.toLowerCase().includes(originFilter)) &&
                    (!destinationFilter || route.destination.toLowerCase().includes(destinationFilter));
            });

            // Clear existing table rows
            const tableBody = document.getElementById('busRoutesTable').querySelector('tbody');
            tableBody.innerHTML = '';

            // Populate the table with filtered routes
            filteredRoutes.forEach(route => {
                const row = tableBody.insertRow();
                row.innerHTML = `
                <td>${route.routeId}</td>
                <td>${route.origin}</td>
                <td>${route.destination}</td>
                <td>${new Date(route.departureTime).toLocaleString()}</td>
                <td>${new Date(route.arrivalTime).toLocaleString()}</td>
            `;
            });
        }
        function clearFilters() {
            // Clear filter input values
            document.getElementById('dateFilter').value = '';
            document.getElementById('originFilter').value = '';
            document.getElementById('destinationFilter').value = '';

            // Reset table to show all bus routes
            applyFilters();
        }

    </script>

    <script>
        // Function to fetch user's bookings and display count
        async function displayUserBookingsCount() {
            // Get user ID from localStorage
            const data = JSON.parse(localStorage.getItem('user'));
            const userId = data["userId"]
            if (userId) {
                try {

                    // Fetch user's bookings from the server
                    const response = await fetch(`http://localhost:5017/api/Booking`);
                    if (response.ok) {
                        const bookings = await response.json();
                        let count = 0;
                        for (const booking of bookings) {
                            if (booking.userId == userId) {
                                count++;
                            }
                        }
                        const userBookingsCountElement = document.getElementById('userBookingsCount');
                        userBookingsCountElement.textContent = `You have ${bookings.length} bookings.`;
                    } else {
                        throw new Error('Failed to fetch user bookings.');
                    }
                } catch (error) {
                    console.error('Error:', error);
                }
            } else {
                console.warn('User ID not found in localStorage.');
            }
        }

        // Call the function when the page loads
        displayUserBookingsCount();
    </script>

    <script>
        function openBookingModal(routeId) {
            // Set the routeId in the modal form
            document.getElementById('routeId').value = routeId;
            // Open the modal
            $('#bookingModal').modal('show');
        }
        async function createBooking() {



            const userId = JSON.parse(localStorage.getItem('user')).userId;
            const numOfSeats = document.getElementById('numOfSeats').value;
            const routeId = document.getElementById('routeId').value;
            const bookingTime = new Date().toISOString();

            if (parseInt(numOfSeats) > 5) {
                alert('You can only book up to 5 seats.');
                retur;
            }

            const bookingData = {
                userId: userId,
                numOfSeats: parseInt(numOfSeats),
                routeId: parseInt(routeId),
                bookingTime: bookingTime
            };

            try {
                const response = await fetch('http://localhost:5017/api/Booking', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(bookingData)
                });

                if (response.ok) {
                    // Booking created successfully
                    $('#bookingModal').modal('hide');
                    alert('Booking created successfully.');
                    // Refresh the page or update booking count
                    displayUserBookingsCount();
                } else {
                    throw new Error('Failed to create booking.');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Failed to create booking. Please try again.');
            }
        }

    </script>
</body>

</html>
